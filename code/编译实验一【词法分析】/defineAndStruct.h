#pragma once
#include<fstream>
#include<iostream>
#include <string>
using namespace std;

#define acc 100		 //分析成功
#define E 6			 //非终结符E
#define E2 7			 //非终结符E
#define E_ 8		 //非终结符E'
#define B 8			 //非终结符B
#define A 9			 //非终结符A
#define O 10			 //非终结符O
#define S 9			 //非终结符S
#define L 10			 //非终结符L
#define T 9		 //非终结符T
#define T_ 10		 //非终结符T'
#define F 11		 //非终结符F
#define kongzi -2		 //空字
#define suanshu 3	//算术表达式
#define buer 5	//布尔表达式

#define nOFkeepwords 14 //保留字数量

//保留字：
#define s_if 0
#define s_else 1
#define s_switch 2
#define s_case 3
#define s_break 4
#define s_continue 5
#define s_int 6
#define s_for 7
#define s_while 8
#define s_do 9
#define s_return 10
#define s_void 11
#define s_char 12
#define s_include 13


#define iden  20  //标识符
#define cons  21  //常数


#define underline 22  //下划线_
#define not 23		//!
#define and 24		//&&
#define or 25		//||

#define err 30		//错误标志

//运算符50~69
#define bigger 50   //    >
#define smaller 51 //    <
#define jia 52 //  +
#define jian 53 //  -
#define chen 54 //  *
#define chu 55 //  /
#define deng 56 //  =
#define dadeng 57 //  >=
#define xiaodeng 58 //  <=
#define budeng 59 //  !=
#define equal 60 //==

//界符70~80
#define douhao 70 //  ,
#define fenhao 71 //  ;
#define	dal 72 //  {
#define dar 73 //  }
#define xiaol 74 // ( 
#define xiaor 75 //  )
#define jinhao 76//#

struct aa{//词法分析识别的“词”
	int sy1;//种别编码
	int pos;//存储在表中的序号
	int zhongjie;
	int linecount;
};


struct keepwords{//保留字
	string name;//保留字符号
	int value;//种别编码
};

struct stackType{//分析栈
	int a;//状态栈
	aa b;//符号栈
	int c;//语义栈
};

struct bb{//符号栈加语义栈的变形，用于表达式计算过程的输出
	int a;//数字
	string b;//+*（）等运算符号
};


struct fourexp{//四元式
	string op;//操作符号
	aa arg1;
	aa arg2;
	int result;
};
 
struct ntab33{
	int tc;
	int fc;
};

struct ll{
	int nxq1;
	int tc1;
	int fc1;
};
//static int action[18][12] = {//算术表达式SLR(1)分析表，有空字的
//	/*	   i	+	*	ε	(	)	#		E	E'	T	T'	F	*/
//	/*0*/{ 5, -2, -3, -1, 4, -4, -5, 1, -1, 2, -1, 3 },
//	/*1*/{ -20, -20, -20, -20, -20, -20, acc, -1, -1, -1, -1, -1 },
//	/*2*/{ -1, 7, -1, 8, -1, -6, -1, -1, 6, -1, -1, -1 },
//	/*3*/{ -1, -1, 10, 11, -1, -1, -1, -1, -1, -1, 9, -1 },
//	/*4*/{ 5, -7, -8, -1, 4, -9, -10, 12, -1, 2, -1, 3 },
//	/*5*/{ -20, 108, 108, 108, -20, 108, 108, -1, -1, -1, -1, -1 },
//	/*6*/{ -1, -1, -1, -1, -1, 101, 101, -1, -1, -1, -1, -1 },
//	/*7*/{ 5, -11, -12, -1, 4, -13, -14, -1, -1, 13, -1, 3 },
//	/*8*/{ -1, -1, -1, -1, -1, 103, 103, -1, -1, -1, -1, -1 },
//	/*9*/{ -1, 104, 104, -1, -1, 104, 104, -1, -1, -1, -1, -1 },
//	/*10*/{ 5, -15, -16, -1, 4, -17, -18, -1, -1, -1, -1, 14 },
//	/*11*/{ -1, 106, -1, 106, -1, 106, 106, -1, -1, -1, -1, -1 },
//	/*12*/{ -19, -19, -19, -19, -19, 15, -19, -1, -1, -1, -1, -1 },
//	/*13*/{ -1, 7, -1, 8, -1, -1, -1, -1, 16, -1, -1, -1 },
//	/*14*/{ -1, -1, 10, 11, -1, -1, -1, -1, -1, -1, 17, -1, },
//	/*15*/{ -20, 107, 107, 107, -20, 107, 107, -1, -1, -1, -1, -1 },
//	/*16*/{ -1, -1, -1, -1, -1, 102, 102, -1, -1, -1, -1, -1 },
//	/*17*/{ -1, 105, -1, 105, -1, 105, 105, -1, -1, -1, -1, -1 }
//};


static int action22[18][12] = {//平时上机的那个算术表达式的SLR(1)分析表
	/*	   i	+	*	ε	(	)	#		E	E'	T	T'	F	*/
	/*0*/{ 5, -2, -3, -1, 4, -4, -5, 1, -1, 2, -1, 3 },
	/*1*/{ -20, -20, -20, -20, -20, -20, acc, -1, -1, -1, -1, -1 },
	/*2*/{ -1, 7, -1, 8, -1, -6, -1, -1, 6, -1, -1, -1 },
	/*3*/{ -1, -1, 10, 11, -1, -1, -1, -1, -1, -1, 9, -1 },
	/*4*/{ 5, -7, -8, -1, 4, -9, -10, 12, -1, 2, -1, 3 },
	/*5*/{ -20, 108, 108, 108, -20, 108, 108, -1, -1, -1, -1, -1 },
	/*6*/{ -1, -1, -1, -1, -1, 101, 101, -1, -1, -1, -1, -1 },
	/*7*/{ 5, -11, -12, -1, 4, -13, -14, -1, -1, 13, -1, 3 },
	/*8*/{ -1, -1, -1, -1, -1, 103, 103, -1, -1, -1, -1, -1 },
	/*9*/{ -1, 104, 104, -1, -1, 104, 104, -1, -1, -1, -1, -1 },
	/*10*/{ 5, -15, -16, -1, 4, -17, -18, -1, -1, -1, -1, 14 },
	/*11*/{ -1, 106, -1, 106, -1, 106, 106, -1, -1, -1, -1, -1 },
	/*12*/{ -19, -19, -19, -19, -19, 15, -19, -1, -1, -1, -1, -1 },
	/*13*/{ -1, 7, -1, 8, -1, -1, -1, -1, 16, -1, -1, -1 },
	/*14*/{ -1, -1, 10, 11, -1, -1, -1, -1, -1, -1, 17, -1, },
	/*15*/{ -20, 107, 107, 107, -20, 107, 107, -1, -1, -1, -1, -1 },
	/*16*/{ -1, -1, -1, -1, -1, 102, 102, -1, -1, -1, -1, -1 },
	/*17*/{ -1, 105, -1, 105, -1, 105, 105, -1, -1, -1, -1, -1 }
};

static int action2[10][7] = {//算术表达式SLR(1)分析表
	/*	   i	+	*	(	)	#		E*/
	/*0*/{ 3, -2, -3, 2, -4, -5,1 },
	/*1*/{ -20, 4, 5, -20, -20, acc, -1 },
	/*2*/{ 3, -7, -8, 2, -9, -10,6 },
	/*3*/{ -20, 104, 104, -20,104, 104, -1 },
	/*4*/{ 3, -11, -12, 2, -13, -14, 7 },
	/*5*/{ 3, -15, -16, 2, -17, -18, 8 },
	/*6*/{ -21, 4, 5, -21, 9, -19,  -1 },
	/*7*/{ -20, 101, 5, -20, 101, 101, -1},
	/*8*/{ -20, 102, 102, -20, 102, 102, -1 },
	/*9*/{ -21, 103, 103, -21,  103, 103, -1}	
};

// -1：表达式错误 
// -2：表达式不能以+开头 
// -3：表达式不能以*开头 
// -4：表达式不能以）开头 
// -5：表达式只有一个分号，没有其他内容 
// -6：缺少与）匹配的（ 
// -7：左括号右边不能为+ 
// -8：左括号右边不能为* 
// -9：小括号（）之间没有任何内容 
// -10：（出现在最右边 
// -11：出现两个连续的+ 
// -12：+后面出现* 
// -13：+后面出现） 
// -14：表达式以+结尾 
// -15：*后面出现+ 
// -16：出现两个连续的*号 
// -17：*后面出现） 
// -18：表达式以*结尾 
// -19：左右括号数量不匹配！ 
// -20：缺少分号或结束符！
// -21：缺少运算符号！
//

//-22：比较符号rop出现在最左边
//-23：and出现在最左边
//-24：or出现在最左边
//-25：比较符号rop没有左操作数

//-30:没有与else匹配的if语句
//-31:程序以｝开头
//-32:没有与if匹配的else语句

static int action3[16][11] = {//布尔表达式SLR(1)分析表
	/*	   i	rop		(	)	not		and		or		#		B		A		O/
	/*0*/{ 2, -22, 3, -4, 4, -23, -4, -1, 1, 5, 6 },
	/*1*/{ -1, -1, -1, -1, -1, 7, 8, acc ,-1,-1,-1},
	/*2*/{ -1, 9, -1, 101, -1, 101, 101, 101, -1, -1, -1 },
	/*3*/{ 2, -25, 3, -1, 4, -1, -1, -1, 10, 5, 6 },
	/*4*/{ 2, -1, 3, -1, 4, -1, -1, -1, 11, 5, 6 },
	/*5*/{ 2, -1, 3, -1, 4, -1, -1, -1, 12, 5, 6 },
	/*6*/{ 2, -1, 3, -1, 4, -1, -1, -1, 13, 5, 6 },
	/*7*/{ 105, -1, 105, -1, 105, -1, -1, -1, -1, -1, -1 },
	/*8*/{ 107, -1, 107, -1, 107, -1, -1, -1, -1, -1, -1 },
	/*9*/{ 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	/*10*/{ -1, -1, -1, 15, -1, 7, 8, -1, -1, -1, -1 },
	/*11*/{ -1, -1, -1, 104, -1, 7, 8, 104, -1, -1, -1 },
	/*12*/{ -1, -1, -1, 106, -1, 7, 8, 106, -1, -1, -1 },
	/*13*/{ -1, -1, -1, 108, -1, 7, 8, 108, -1, -1, -1 },
	/*14*/{ -1, -1, -1, 102, -1, 102, 102, 102, -1, -1, -1 },
	/*15*/{ -1, -1, -1, 103, -1, 103, 103, 103, -1, -1, -1 }
};



static int action[18][11] = {//程序语句SLR(1)分析表
	/*	   if	else		while	a	;		e		{		}		#     S			L	*/
	/*0*/{ 2, -30, 3, 5, -1,-1,4,-31,-1,1,-1 },
	/*1*/{ -1, -1, -1, -1, -1, -1, -1,-1, acc ,-1,-1},
	/*2*/{ -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1 },
	/*3*/{ -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1 },
	/*4*/{ 2, -30, 3, 5, -1, -1, 4, -1, -1, 14, 8 },
	/*5*/{ -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1 },
	/*6*/{ 2, -1, 3, 5, -1, -1, 4, -1, -1, 11, -1 },
	/*7*/{ 2, -1, 3, 5, -1, -1, 4, -1, -1, 12, -1 },
	/*8*/{ -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1 },
	/*9*/{ 2, -1, 3, 5, -1, -1, 4, -1, -1, 14, -1 },
	/*10*/{ 104, 104, 104, 104, -1, -1, 104, 104, 104, -1, -1 },
	/*11*/{ -32, 15, -32, -32, -32, -32, -32, -32, -32, -1, -1 },
	/*12*/{ 102, 102, 102, 102, -1, -1, 102, 102, 102, -1, -1 },
	/*13*/{ 103, 103, 103, 103, -1, -1, 103, 103, 103, -1, -1 },
	/*14*/{ 2, -1, 3, 5, -1, -1, 4, 106, -1, 14, 16 },
	/*15*/{ 2, -30, 3, 5, -1, -1, 4, -1, -1, 17, -1 },
	/*16*/{ -1, -1, -1, -1, -1, -1, -1, 105, -1, -1, -1 },
	/*17*/{ 101, 101, 101, 101, -1, -1, 101, 101, 101, -1, -1 }
};


//其他
static keepwords others[4] = { { "_", underline }, { "!", not }, { "&&", and }, { "||", or } };

//保留字：
static keepwords kw[nOFkeepwords] = { { "if", s_if }, { "else", s_else }, { "switch", s_switch }, { "case", s_case },
{ "break", s_break }, { "continue", s_continue }, { "int", s_int }, { "for", s_for },
{ "while", s_while }, { "do", s_do }, { "return", s_return }, { "void", s_void },
{ "char", s_char }, { "include", s_include } };

//运算符：
static keepwords yunsuan[11] = { { ">", bigger }, { "<", smaller }, { "+", jia }, { "-", jian }, { "*", chen },
{ "/", chu }, { "=", deng }, { ">=", dadeng }, { "<=", xiaodeng }, { "!=", budeng }, { "==", equal } };

//界符：
static keepwords border[7] = { { ",", douhao }, { ";", fenhao }, { "{", dal }, { "}", dar },
{ "(", xiaol }, { ")", xiaor }, { "#", jinhao } };

